{"meta":{"title":"XuHui","subtitle":"","description":"学习和生活日常","author":"xu","url":"https://xyuechen/github.io","root":"/"},"pages":[{"title":"categories","date":"2023-07-29T08:05:55.000Z","updated":"2023-07-29T08:07:06.117Z","comments":true,"path":"categories/index.html","permalink":"https://xyuechen/github.io/categories/index.html","excerpt":"","text":""},{"title":"search","date":"2023-07-29T08:10:56.000Z","updated":"2023-07-29T08:11:11.880Z","comments":true,"path":"search/index.html","permalink":"https://xyuechen/github.io/search/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-07-29T08:07:46.000Z","updated":"2023-07-29T08:08:07.438Z","comments":true,"path":"tags/index.html","permalink":"https://xyuechen/github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"tensorflow下载过程","slug":"tensorflow下载过程","date":"2024-06-14T01:34:49.000Z","updated":"2024-06-14T01:44:56.981Z","comments":true,"path":"2024/06/14/tensorflow下载过程/","link":"","permalink":"https://xyuechen/github.io/2024/06/14/tensorflow%E4%B8%8B%E8%BD%BD%E8%BF%87%E7%A8%8B/","excerpt":"","text":"前言我在一年前曾写过一个tensorflow的安装流程笔记，但是今天再次安装发现存在一些问题，因此重新撰写 版本之前的笔记中我没有意识到python，tensorflow，cuda，cudnn的对应关系，这次在服务器上安装就掉坑里了，因此在安装前首先要注意需要下载的版本，以及自己的cuda和cudnn版本 我使用的是python = 3.9，tensorflow==2.10.0，cuda==11.3.1，cudnn==8.2.1 具体步骤为 12345conda create -n env_name python=3.9conda activate env_nameconda install cudatoolkit==11.3.1conda install cudnn==8.2.1pip install tensorflow==2.10.0 -i source 这样就初步安装成功了 验证在之前的验证中我只验证了tensorflow是否安装成功，而没有检测能否使用GPU，因此将验证命令更新如下 1234567import tensorflow as tfprint(tf.__version__)print(tf.test.is_gpu_available())print(tf.test.gpu_device_name())print(tf.config.list_physical_devices(&#x27;GPU&#x27;))print(&quot;Num GPUs Available: &quot;,len(tf.config.experimental.list_physical_devices(&#x27;GPU&#x27;))) 运行结果中出现这个True表示识别成功","categories":[{"name":"daily","slug":"daily","permalink":"https://xyuechen/github.io/categories/daily/"}],"tags":[{"name":"dl","slug":"dl","permalink":"https://xyuechen/github.io/tags/dl/"}]},{"title":"Autodl的使用","slug":"Autodl的使用","date":"2024-06-01T06:38:56.000Z","updated":"2024-06-14T01:44:40.196Z","comments":true,"path":"2024/06/01/Autodl的使用/","link":"","permalink":"https://xyuechen/github.io/2024/06/01/Autodl%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"创建实例首先登录网页AutoDL算力云 | 弹性、好用、省钱。租GPU就上AutoDL 注：记得进行学生认证 按照自己的需求选择，我希望进行深度学习，同时预算不高，因此我选择按量计费以及3090 这里可以选择需要预先安装的框架，我们选择Miniconda，依赖之后再安装 这样就创建成功了，主要登陆的指令在ssh登录里面，我们可以使用Xshell来进行连接，也可以直接点击JupyterLab来进行连接 连接实例我们选择直接点击JupyterLab进行连接 如图所示，连接成功 我们也试一下xftp连接 首先复制连接指令ssh -p 53669 root@connect.yza1.seetacloud.com 这段指令中： 53669：端口号 root：用户名 connect.yza1.seetacloud.com：主机host 密码：在网页上 按照上图填入xftp中即可 配置环境 输入vim ~/.bashrc 在最后加上source /root/miniconda3/etc/profile.d/conda.sh 输入bash刷新一下实例 激活环境conda activate base 创建新环境conda create -n happy python=3.10，这里happy是我的环境名称 进入新环境conda activate happy 下载包autodl的官网帮助文档中有关于pytorch安装的说明 注：安装conda install ipykernel，然后输入ipython kernel install --user --name=happy来更新页面 可以将requirement.txt传输到服务器上再下载 java环境配置有些包需要Java环境，因此我们也安装一下java 首先从官网下载对应的文件Java Downloads | Oracle 下载好后使用xftp传输到服务器上的/usr/local的位置上，解压 解压命令为tar -zvxf zulu8.56.0.21-ca-jdk8.0.302-linux_x64.tar.gz 解压后配置环境变量，环境变量在/etc/profile文件中 输入vim /etc/profile进入编辑模式 然后输入 12345export JAVA_HOME=/usr/local/jdk1.8.0_321 #自己的安装目录export JRE_HOME=$&#123;JAVA_HOME&#125;/jreexport CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib:$CLASSPATHexport JAVA_PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;JRE_HOME&#125;/binexport PATH=$PATH:$&#123;JAVA_PATH&#125; 保存退出，再刷新source /etc/profile 输入java -version来检验是否配置成功","categories":[{"name":"experient","slug":"experient","permalink":"https://xyuechen/github.io/categories/experient/"}],"tags":[{"name":"dl","slug":"dl","permalink":"https://xyuechen/github.io/tags/dl/"}]},{"title":"openslide安装","slug":"openslide安装","date":"2024-05-16T11:59:06.000Z","updated":"2024-06-14T01:44:51.144Z","comments":true,"path":"2024/05/16/openslide安装/","link":"","permalink":"https://xyuechen/github.io/2024/05/16/openslide%E5%AE%89%E8%A3%85/","excerpt":"","text":"openslide 下载在(Downloading OpenSlide)下载对应操作系统的二进制包，解压 为这个文件夹中的bin和lib添加环境变量 激活环境，在命令行中运行 1pip install Openslide-python 出现这行字表示成功安装 openslide 导入在环境中输入python 这个时候直接导入会报错 我们可以进行如下操作： 先加载os 12import osos.add_dll_directory(&quot;D:\\\\Users\\\\xuhui\\\\anaconda3\\\\Library\\\\openslide-win64-20231011\\\\bin&quot;) 再进行加载 成功导入","categories":[{"name":"experient","slug":"experient","permalink":"https://xyuechen/github.io/categories/experient/"}],"tags":[{"name":"dl","slug":"dl","permalink":"https://xyuechen/github.io/tags/dl/"}]},{"title":"torch_geometric安装","slug":"torch-geometric安装","date":"2024-05-12T03:32:42.000Z","updated":"2024-06-14T01:45:05.884Z","comments":true,"path":"2024/05/12/torch-geometric安装/","link":"","permalink":"https://xyuechen/github.io/2024/05/12/torch-geometric%E5%AE%89%E8%A3%85/","excerpt":"","text":"torch_geometric安装过程环境+版本检查首先打开anaconda虚拟环境 我这里已经有一个下载好的pytorch环境，激活并查看相关信息 下载必要的依赖找到[GitHub](pyg-team&#x2F;pytorch_geometric: Graph Neural Network Library for PyTorch (github.com))的地址，点击Additional Libraries中的here 找到对应的pytorch和cuda版本，点击进去 其中一共有四种依赖，下载下来，如图所示 安装依赖打开虚拟环境，进入上述四个文件的目录下 然后依次安装 torch_scatter 1pip install torch_scatter-2.0.9-cp36-cp36m-win_amd64.whl torch_sparse 1pip install torch_sparse-0.6.12-cp36-cp36m-win_amd64.whl torch_cluster 1pip install torch_cluster-1.5.9-cp36-cp36m-win_amd64.whl torch_spline_conv 1pip install torch_cluster-1.5.9-cp36-cp36m-win_amd64.whl 安装torch_geometric，可以指定版本 1pip install torch_geometric -i https://mirrors.aliyun.com/pypi/simple 最后验证一下","categories":[{"name":"experient","slug":"experient","permalink":"https://xyuechen/github.io/categories/experient/"}],"tags":[{"name":"-dl","slug":"dl","permalink":"https://xyuechen/github.io/tags/dl/"}]},{"title":"hexo-git报错","slug":"hexo-git报错","date":"2024-04-20T09:35:02.000Z","updated":"2024-04-20T10:03:46.571Z","comments":true,"path":"2024/04/20/hexo-git报错/","link":"","permalink":"https://xyuechen/github.io/2024/04/20/hexo-git%E6%8A%A5%E9%94%99/","excerpt":"","text":"无法连接半年没用hexo，今天连接时发现需要输入用户名和密码，输入后报错，无法连接 遂重新配置一遍 首先配置一下git的用户名和邮箱 创建ssh密钥 在显示的路径下找到文件 复制里面的内容 上传密钥 验证连接 出现图中”Hi“后面的内容即连接成功","categories":[{"name":"dairy","slug":"dairy","permalink":"https://xyuechen/github.io/categories/dairy/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://xyuechen/github.io/tags/hexo/"}]},{"title":"conda_set","slug":"conda-set","date":"2024-04-19T14:53:12.000Z","updated":"2024-06-14T01:44:44.394Z","comments":true,"path":"2024/04/19/conda-set/","link":"","permalink":"https://xyuechen/github.io/2024/04/19/conda-set/","excerpt":"","text":"conda修改环境路径conda 默认的环境路径在C:\\Users\\用户名\\conda中，C盘位置不够，因此希望修改到其余地方 在anaconda的终端输入 之后新建的环境就会出现再目标路径下了 conda修改jupyter notebook的默认文件夹在anaconda的终端找到jupyter的配置文件 打开文件，找到这几行 取消c.NotebookApp.notebook_dir这一行的注释，在单引号中写入目标路径 打开jupyter notebook的应用路径 将选中区域删除 配置完成 如果环境中没有jupyter，那么在终端输入conda install nb_conda即可 pytorch下载命令pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118 jupyter设置新建的环境中没有jupyter，想要使用的话我们需要下载配置 首先下载 1pip install jupyter 下载后的界面如图 比较简陋，我们也无法进行代码自动补全 因此我们进行一些配置，在anaconda中输入 1234pip install jupyter_contrib_nbextensionsjupyter contrib nbextensions install --userpip install jupyter_nbextensions_configuratorjupyter nbextensions_configurator enable --user 安装后界面如下 选中hinterland，设置完成","categories":[{"name":"experient","slug":"experient","permalink":"https://xyuechen/github.io/categories/experient/"}],"tags":[{"name":"dl","slug":"dl","permalink":"https://xyuechen/github.io/tags/dl/"}]},{"title":"免费科学上网方法记录","slug":"免费科学上网方法记录","date":"2023-08-10T14:10:09.000Z","updated":"2023-08-10T14:20:16.427Z","comments":true,"path":"2023/08/10/免费科学上网方法记录/","link":"","permalink":"https://xyuechen/github.io/2023/08/10/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/","excerpt":"","text":"今天在油管上看到一个科学上网方法，记录一下 首先是[下载链接](1.1.1.1 — The free app that makes your Internet faster.)，这是一个名为warp的软件，下载后可以免费获得1G的科学流量 但是这显然不够用 免费获取永久资格的方法有两种： 使用信用卡或者paypal注册一个CloudFlare的账号，选择团队套餐，$0的那个，就可以获得免费的流量 关注warp的telegram 我选择的是第二种 先使用免费的1G流量注册一个telegram账号（国内手机号可以使用），然后搜索warp+bot 如图所示，选择这个账号，进入后点击”&#x2F;generate“，他会提醒你关注两个账号，关注后点击第三个”我已关注“，它会返给你几个计算题，算好后就会生成密钥，最后回到warp软件偏好设置中更换密钥，就可以获得花不完的流量啦 原视频链接：(10) 免费VPN的杀手！Warp+ 速度贼快，不限制流量，由大名鼎鼎的CloudFlare 提供，放心白嫖 | 零度解说 - YouTube","categories":[{"name":"daily","slug":"daily","permalink":"https://xyuechen/github.io/categories/daily/"}],"tags":[{"name":"daily","slug":"daily","permalink":"https://xyuechen/github.io/tags/daily/"},{"name":"magic","slug":"magic","permalink":"https://xyuechen/github.io/tags/magic/"}]},{"title":"错误1006解决方案","slug":"错误1006解决方案","date":"2023-08-01T14:08:52.000Z","updated":"2023-08-01T14:31:59.978Z","comments":true,"path":"2023/08/01/错误1006解决方案/","link":"","permalink":"https://xyuechen/github.io/2023/08/01/%E9%94%99%E8%AF%AF1006%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","excerpt":"","text":"记录一下今天离开电脑的时候没有关闭watt toolkit软件（并且它还开着GitHub加速），等我回来时电脑自动关机了 当时意识到大事不妙（以前也遇到过），果然，已经无法上网了，并且watt提示错误代码1006，主机拒绝访问 于是记录一下解决过程 首先搜索了一下“电脑连上网络但是无法上网怎么办” 一个解决方案说可以修改wlan的设置，双击IPv4 修改DNS设置（由于并没有用所以我就不贴上来了） 然后在edge里运行网络检测，提示“远程计算机或设备不接受连接”，搜索这个关键词 修复方法：打开控制面板（win+R再输入control）–&gt; 连接 –&gt; 局域网设置 –&gt; 只勾选“自动检测设置” 这样就解决问题了","categories":[{"name":"daily","slug":"daily","permalink":"https://xyuechen/github.io/categories/daily/"},{"name":"error","slug":"daily/error","permalink":"https://xyuechen/github.io/categories/daily/error/"}],"tags":[{"name":"daily","slug":"daily","permalink":"https://xyuechen/github.io/tags/daily/"}]},{"title":"picgo+github","slug":"picgo-github","date":"2023-07-30T14:52:14.000Z","updated":"2023-08-23T00:51:20.484Z","comments":true,"path":"2023/07/30/picgo-github/","link":"","permalink":"https://xyuechen/github.io/2023/07/30/picgo-github/","excerpt":"","text":"picgo下载[链接](PicGo (molunerfinn.com)) 下载安装后打开，进入 图床设置-&gt;github 填入相应的信息 token要在GitHub生成 生成token在GitHub新建一个仓库，取一个自己喜欢的名，（*这里取的是image*） 然后在设置里，拉到最下面，选择开发者选项 填入即可 typora设置由于app上传失败（不知道为什么，于是选择了插件模式） 选择这个模式并下载，接着在C盘中&#x2F;APPData&#x2F;Roaming文件夹下找到Typora文件夹，里面的&#x2F;picgo&#x2F;win64子文件夹，其中有一个.exe文件，不用管他，在路径中输入cmd打开终端，并按照下图输入 其中customUrl最后两个为你的用户名和仓库名，按照自身情况替换 接着输入picgo use uploader，回车后选择GitHub，成功后回到typora选择验证，在GitHub中看到图片即成功 这样就成功了","categories":[{"name":"hexo","slug":"hexo","permalink":"https://xyuechen/github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://xyuechen/github.io/tags/hexo/"}]},{"title":"archlinux的截图配置","slug":"archlinux的截图配置","date":"2023-07-30T14:25:43.000Z","updated":"2023-07-30T14:35:49.430Z","comments":true,"path":"2023/07/30/archlinux的截图配置/","link":"","permalink":"https://xyuechen/github.io/2023/07/30/archlinux%E7%9A%84%E6%88%AA%E5%9B%BE%E9%85%8D%E7%BD%AE/","excerpt":"","text":"下载选择的是flameshot 在终端输入 1sudo pacman -S flameshot-git 截图方式：在终端输入 1flameshot gui 快捷键配置 如上图所示，选择一个自己喜欢的快捷键即可","categories":[{"name":"linux","slug":"linux","permalink":"https://xyuechen/github.io/categories/linux/"}],"tags":[{"name":"archliux","slug":"archliux","permalink":"https://xyuechen/github.io/tags/archliux/"},{"name":"linux","slug":"linux","permalink":"https://xyuechen/github.io/tags/linux/"}]},{"title":"archlinux记录","slug":"archlinux记录","date":"2023-07-29T08:47:56.000Z","updated":"2023-07-30T14:35:52.260Z","comments":true,"path":"2023/07/29/archlinux记录/","link":"","permalink":"https://xyuechen/github.io/2023/07/29/archlinux%E8%AE%B0%E5%BD%95/","excerpt":"","text":"2023 年 7 月 26 日买的移动硬盘到了，于是决定搞个 archlinux 系统玩玩 遇到第一个错误虚拟机进入不了安装界面原因：内存分配太少了解决：多加点内存 安装过程参考 b 站的文章 https://www.bilibili.com/read/cv20753052?spm_id_from=333.999.0.0过程很详尽，可以直接对着操作 我使用的是 kde 的桌面于是遇到第二个错误：中文输入法fcitx 5 虽然很多人推荐，但是不知道什么毛病死活用不了最后还是下载了 ibus 美化使用了类苹果的主题 后来尝试下载 ohmyzsh遇到第三个问题：浏览器的文字不能复制到 vim 中(字数那么多全部打上去要我死)解决：sudo pacman -S gvim这样就可以复制了(必须使用 gvim) 接下来是最麻烦的一个问题，无法从 github 下载文件还在解决中clash 失败了最后使用的还是 v 2 ray 12yay -S v2raya-binsudo systemctl enable --now v2raya 这样就成功安装了，再使用 KDE 菜单打开浏览器地址，导入代理行吧，还是不能科学上网，ohmyzsh 也还是下载不了 2023 年 7 月 28 日今天继续美化oh-my-zsh 下载成功具体操作： 123git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zshcp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrcchsh -s /bin/zsh 第一步并没有 git 成功，我是直接在 github 把这个项目打包下载，再在 /home/xu 下复制并重命名为 .oh-my-zsh第三步其实也没有成功，我是直接在图形界面修改的接着编辑 /.zshrc 配置文件修改主题我选择的是 ys，也可以设置为 random，这样每次都是不一样的主题","categories":[{"name":"linux","slug":"linux","permalink":"https://xyuechen/github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://xyuechen/github.io/tags/linux/"},{"name":"archlinux","slug":"archlinux","permalink":"https://xyuechen/github.io/tags/archlinux/"}]},{"title":"hexo美化记录","slug":"hexo美化记录","date":"2023-07-29T04:21:36.000Z","updated":"2023-07-29T09:21:24.065Z","comments":true,"path":"2023/07/29/hexo美化记录/","link":"","permalink":"https://xyuechen/github.io/2023/07/29/hexo%E7%BE%8E%E5%8C%96%E8%AE%B0%E5%BD%95/","excerpt":"","text":"主题在网站(hexo)[Themes | Hexo]中可以查看别人的主题，下载并进行自己的美化 下载后文件会放在&#x2F;themes目录下 更改blog文件夹下的_config.yml，修改主题 有能力的也可以修改模板文件进行自定义主题 文章分类生成的新文章头部会有一个说明 例如这篇博客的头部 在这一块加上 1categories: hexo 本地图片插入文章网页不显示关于这个问题，搜索后发现有几种方法： 修改配置文件 安装插件 手动插入 我尝试了一下，修改配置文件是指_config.yml 将这一行改成false，再将图片存放在与博客同名的文件夹中 这个方法没用 于是我又尝试了手动插入 在source文件夹下新建一个文件夹为image，再将图片存放在里面，博客里使用相对路径，如/image/assert.jpg这样就可以成功显示了 这个方法对我有用，于是没有尝试插件 插件网址：[插件](Plugins | Hexo) 待补充 背景图片几个可以找背景的网址： Awesome Wallpapers - wallhaven.cc 极简壁纸_海量电脑桌面壁纸美图_4K超高清_最潮壁纸网站 (zzzmh.cn) Wallpaper Abyss - HD Wallpapers, Background Images (alphacoders.com) 这个网站有点慢，但是图很多 背景图片地址： E:\\projects\\blog\\blog\\themes\\diaspora\\source\\img 其中的disapora是主题名字，对应自己的主题名寻找，然后存进去 然后编辑主题的配置文件（主题文件夹下的_config.yml） 修改这几个参数就好，此处图片地址也为相对路径","categories":[{"name":"hexo","slug":"hexo","permalink":"https://xyuechen/github.io/categories/hexo/"}],"tags":[{"name":"daily","slug":"daily","permalink":"https://xyuechen/github.io/tags/daily/"}]},{"title":"我的hexo配置过程","slug":"我的hexo配置过程","date":"2023-07-29T01:46:35.000Z","updated":"2024-06-14T01:56:23.443Z","comments":true,"path":"2023/07/29/我的hexo配置过程/","link":"","permalink":"https://xyuechen/github.io/2023/07/29/%E6%88%91%E7%9A%84hexo%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B/","excerpt":"","text":"起因前两天配置了一个archlinux，过程中遇到很多问题，想记录一下，忽然想起两年前做过的个人博客实验，于是打算重新捡起来 过程当初的实验并没有成功，于是我重新尝试了一下 遇到的问题：git bash中无法执行hexo,即使修改了环境变量也没用 在网上找到的解决方案： 建立一个空的blog文件夹，再执行： 1234npx hexo init blogcd blognpm installnpx hexo server 注：命令在blog文件夹打开终端执行 执行后打开 http://localhost:4000 就可以看到博客界面了 停止服务：在终端按下CTRL+C 新建博客：在终端输入npx hexo n &quot;博客名字&quot; 上传博客： npx hexo clean npx hexo g npx hexo s 再打开网页，就可以看到上传的博客了 上传到github： npx hexo d","categories":[{"name":"hexo","slug":"hexo","permalink":"https://xyuechen/github.io/categories/hexo/"}],"tags":[{"name":"daily","slug":"daily","permalink":"https://xyuechen/github.io/tags/daily/"},{"name":"experient","slug":"experient","permalink":"https://xyuechen/github.io/tags/experient/"}]}],"categories":[{"name":"daily","slug":"daily","permalink":"https://xyuechen/github.io/categories/daily/"},{"name":"experient","slug":"experient","permalink":"https://xyuechen/github.io/categories/experient/"},{"name":"dairy","slug":"dairy","permalink":"https://xyuechen/github.io/categories/dairy/"},{"name":"error","slug":"daily/error","permalink":"https://xyuechen/github.io/categories/daily/error/"},{"name":"hexo","slug":"hexo","permalink":"https://xyuechen/github.io/categories/hexo/"},{"name":"linux","slug":"linux","permalink":"https://xyuechen/github.io/categories/linux/"}],"tags":[{"name":"dl","slug":"dl","permalink":"https://xyuechen/github.io/tags/dl/"},{"name":"-dl","slug":"dl","permalink":"https://xyuechen/github.io/tags/dl/"},{"name":"hexo","slug":"hexo","permalink":"https://xyuechen/github.io/tags/hexo/"},{"name":"daily","slug":"daily","permalink":"https://xyuechen/github.io/tags/daily/"},{"name":"magic","slug":"magic","permalink":"https://xyuechen/github.io/tags/magic/"},{"name":"archliux","slug":"archliux","permalink":"https://xyuechen/github.io/tags/archliux/"},{"name":"linux","slug":"linux","permalink":"https://xyuechen/github.io/tags/linux/"},{"name":"archlinux","slug":"archlinux","permalink":"https://xyuechen/github.io/tags/archlinux/"},{"name":"experient","slug":"experient","permalink":"https://xyuechen/github.io/tags/experient/"}]}