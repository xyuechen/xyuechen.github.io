<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Autodl的使用</title>
    <url>/2024/06/01/Autodl%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><p>首先登录网页<a href="https://www.autodl.com/home">AutoDL算力云 | 弹性、好用、省钱。租GPU就上AutoDL</a></p>
<blockquote>
<p>注：记得进行学生认证</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240601144233859.png" alt="image-20240601144233859"></p>
<p>按照自己的需求选择，我希望进行深度学习，同时预算不高，因此我选择按量计费以及3090</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240601144820389.png" alt="image-20240601144820389"></p>
<p>这里可以选择需要预先安装的框架，我们选择Miniconda，依赖之后再安装</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240601145116937.png" alt="image-20240601145116937"></p>
<p>这样就创建成功了，主要登陆的指令在ssh登录里面，我们可以使用<code>Xshell</code>来进行连接，也可以直接点击<code>JupyterLab</code>来进行连接</p>
<h2 id="连接实例"><a href="#连接实例" class="headerlink" title="连接实例"></a>连接实例</h2><p>我们选择直接点击<code>JupyterLab</code>进行连接</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240601145500031.png" alt="image-20240601145500031"></p>
<p>如图所示，连接成功</p>
<p>我们也试一下<code>xftp</code>连接</p>
<p>首先复制连接指令<code>ssh -p 53669 root@connect.yza1.seetacloud.com</code></p>
<p>这段指令中：</p>
<ul>
<li>53669：端口号</li>
<li>root：用户名</li>
<li><code>connect.yza1.seetacloud.com</code>：主机host</li>
<li>密码：在网页上</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240601151900110.png" alt="image-20240601151900110"></p>
<p>按照上图填入xftp中即可</p>
<h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><ol>
<li>输入<code>vim ~/.bashrc</code></li>
<li>在最后加上<code>source /root/miniconda3/etc/profile.d/conda.sh</code></li>
<li>输入<code>bash</code>刷新一下实例</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240601150102502.png" alt="image-20240601150102502"></p>
<ol start="4">
<li>激活环境<code>conda activate base</code></li>
<li>创建新环境<code>conda create -n happy python=3.10</code>，这里<code>happy</code>是我的环境名称</li>
<li>进入新环境<code>conda activate happy</code></li>
</ol>
<h3 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h3><p>autodl的官网帮助文档中有关于pytorch安装的说明</p>
<blockquote>
<p>注：安装<code>conda install ipykernel</code>，然后输入<code>ipython kernel install --user --name=happy</code>来更新页面</p>
</blockquote>
<p>可以将requirement.txt传输到服务器上再下载</p>
<h3 id="java环境配置"><a href="#java环境配置" class="headerlink" title="java环境配置"></a>java环境配置</h3><p>有些包需要Java环境，因此我们也安装一下java</p>
<p>首先从官网下载对应的文件<a href="https://www.oracle.com/java/technologies/downloads/#java8">Java Downloads | Oracle</a></p>
<p>下载好后使用xftp传输到服务器上的<code>/usr/local</code>的位置上，解压</p>
<p>解压命令为<code>tar -zvxf zulu8.56.0.21-ca-jdk8.0.302-linux_x64.tar.gz </code></p>
<p>解压后配置环境变量，环境变量在<code>/etc/profile</code>文件中</p>
<p>输入<code>vim /etc/profile</code>进入编辑模式</p>
<p>然后输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_321 #自己的安装目录</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib:$CLASSPATH</span><br><span class="line">export JAVA_PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;JRE_HOME&#125;/bin</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_PATH&#125;</span><br></pre></td></tr></table></figure>

<p>保存退出，再刷新<code>source /etc/profile</code></p>
<p>输入<code>java -version</code>来检验是否配置成功</p>
]]></content>
      <categories>
        <category>experient</category>
      </categories>
      <tags>
        <tag>dl</tag>
      </tags>
  </entry>
  <entry>
    <title>archlinux记录</title>
    <url>/2023/07/29/archlinux%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>2023 年 7 月 26 日<br>买的移动硬盘到了，于是决定搞个 archlinux 系统玩玩</p>
<p>遇到第一个错误<br>虚拟机进入不了安装界面<br>原因：内存分配太少了<br>解决：多加点内存</p>
<p>安装过程参考 b 站的文章 <a href="https://www.bilibili.com/read/cv20753052?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv20753052?spm_id_from=333.999.0.0</a><br>过程很详尽，可以直接对着操作</p>
<p>我使用的是 kde 的桌面<br>于是遇到第二个错误：中文输入法<br>fcitx 5 虽然很多人推荐，但是不知道什么毛病死活用不了<br>最后还是下载了 ibus</p>
<p>美化使用了类苹果的主题</p>
<p>后来尝试下载 ohmyzsh<br>遇到第三个问题：浏览器的文字不能复制到 vim 中<br>(字数那么多全部打上去要我死)<br>解决：<code>sudo pacman -S gvim</code><br>这样就可以复制了(必须使用 gvim)</p>
<p>接下来是最麻烦的一个问题，无法从 github 下载文件<br>还在解决中<br>clash 失败了<br>最后使用的还是 v2ray</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S v2raya-bin</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> --now v2raya</span><br></pre></td></tr></table></figure>
<p>这样就成功安装了，再使用 KDE 菜单打开浏览器地址，导入代理<br>行吧，还是不能科学上网，ohmyzsh 也还是下载不了</p>
<p>2023 年 7 月 28 日<br>今天继续美化<br>oh-my-zsh 下载成功<br>具体操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line"><span class="built_in">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
<p>第一步并没有 git 成功，我是直接在 github 把这个项目打包下载，再在 <code>/home/xu</code> 下复制并重命名为 <code>.oh-my-zsh</code><br>第三步其实也没有成功，我是直接在图形界面修改的<br>接着编辑 <code>/.zshrc</code> 配置文件修改主题<br>我选择的是 <code>ys</code>，也可以设置为 <code>random</code>，这样每次都是不一样的主题</p>
<hr>
<p>2024年7月4号</p>
<p>时隔一年，再次捡起这个帖子，在上个月，参考<a href="https://www.bilibili.com/video/BV1kN411m7w4/?share_source=copy_web&vd_source=262fce51bcecea4097592dd1df9c9958">2023年在移动硬盘上安装 Arch Linux 及网络&#x2F;桌面&#x2F;输入法&#x2F;字体&#x2F;声音&#x2F;蓝牙驱动的配置</a> 的视频，成功将arch安装到我的移动硬盘上，进行了一系列安装美化后，成功挂在了nvidia显卡驱动安装上，现在不仅无法开机，还丢失了在arch上写的笔记（心痛）</p>
<p>于是在blog上记录一下，重新安装的过程，防止再次丢失</p>
<p>首先，设置一个虚拟机，要点：</p>
<ul>
<li>USB控制器中选择相应的兼容</li>
<li>选项-高级中应该选择uefi引导，关闭Hyper-V通道缓解</li>
</ul>
<p>虚拟机开机后将移动硬盘连接到虚拟机上，进入安装程序</p>
<h3 id="查看当前硬盘情况"><a href="#查看当前硬盘情况" class="headerlink" title="查看当前硬盘情况"></a>查看当前硬盘情况</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240704021507623.png" alt="image-20240704021507623"></p>
<p>如图所示，其中<code>/dev/sdb</code>为我们的移动硬盘，其中有我之前设置的Linux系统，我们格式化，重新操作</p>
<h3 id="联网并且验证时钟同步"><a href="#联网并且验证时钟同步" class="headerlink" title="联网并且验证时钟同步"></a>联网并且验证时钟同步</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip link</span><br><span class="line">ping www.baidu.com</span><br><span class="line">ip link</span><br><span class="line">timedatectl</span><br></pre></td></tr></table></figure>

<h3 id="设置磁盘空间"><a href="#设置磁盘空间" class="headerlink" title="设置磁盘空间"></a>设置磁盘空间</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br><span class="line">g # 新建分区表</span><br><span class="line">n # 新分区</span><br></pre></td></tr></table></figure>

<p>这里扇区和起始点可以默认，大小需要手动分配，我们分配600M，即输入<code>+600M</code></p>
<p>此后重复操作，第二个区域我们分配16G，第三个区域我们分配120G，然后输入t，设置分区类型，第一个区域的类型编号为1，第二个为19，第三个为23，然后输入p打印看一下，确认无误后输入w写入</p>
<h3 id="分区设置"><a href="#分区设置" class="headerlink" title="分区设置"></a>分区设置</h3><p>首先设置文件系统类型</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/sdb3 # 创建文件系统</span><br><span class="line">mkswap /dev/sdb2</span><br><span class="line">mkfs.fat -F 32 /dev/sdb1</span><br></pre></td></tr></table></figure>

<p>然后挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount /dev/sdb3 /mnt</span><br><span class="line">mount --mkdir /dev/sdb1 /mnt/boot</span><br><span class="line">swapon /dev/sdb2</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="设置镜像"><a href="#设置镜像" class="headerlink" title="设置镜像"></a>设置镜像</h4><p>为了安装更快，我们可以配置一个镜像源（以清华镜像源为例）</p>
<p>编辑文件<code>/etc/pacman.d/mirrorlist</code>，在顶端添加</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>

<h4 id="安装必备的文件"><a href="#安装必备的文件" class="headerlink" title="安装必备的文件"></a>安装必备的文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacstrap -K /mnt base linux linux-firmware sof-firmware netwoekmanager vi vim man-db texinfo gnome</span><br></pre></td></tr></table></figure>

<p>等待片刻即可</p>
<h4 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line">arch-chroot /mnt</span><br><span class="line"><span class="comment"># 配置时区</span></span><br><span class="line"><span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"><span class="comment"># 同步时间</span></span><br><span class="line">hwclock --systohc</span><br><span class="line"><span class="comment"># 语言</span></span><br><span class="line">vim /etc/locale.gen <span class="comment"># 取消en_US:utf-8的注释，保存退出</span></span><br><span class="line">locale-gen <span class="comment"># 生成语言</span></span><br><span class="line">vim /etc/locale.conf <span class="comment"># 写入：LANG=en_US.UTF-8</span></span><br><span class="line">vim /etc/hostname <span class="comment"># 写入系统名字，随意取</span></span><br><span class="line">pacman -S base-devel</span><br><span class="line">useradd -m username <span class="comment"># 添加一个普通用户</span></span><br><span class="line">passwd username <span class="comment"># 设置这个用户的密码</span></span><br><span class="line">visudo <span class="comment"># 为这个用户添加管理权限，在这个文件中找到ALL，在下面添加一行 username ALL=(ALL:ALL) ALL</span></span><br></pre></td></tr></table></figure>

<p>安装引导程序</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -Syu grub efibootmgr amd-ucode intel-ucode</span><br></pre></td></tr></table></figure>

<p>在这里会出现警告信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240704033440304.png" alt="image-20240704033440304"></p>
<p>解决方法：在<code>/etc/pacman.conf</code>中添加源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/arch4edu/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>

<p>然后输入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman-key --recv-keys 7931B6D628C8D3BA</span><br><span class="line">pacman-key --finger 7931B6D628C8D3BA</span><br><span class="line">pacman-key --lsign-key 7931B6D628C8D3BA</span><br><span class="line">yay -S upd72020x-fw</span><br></pre></td></tr></table></figure>

<p>如果由于网速无法下载，那么可以</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/denisandroid/uPD72020x-Firmware ~/Desktop/firmware</span><br><span class="line"><span class="built_in">cp</span> ~/Desktop/firmware/UPDATE.mem ~/.cache/yay/upd72020x-fw</span><br><span class="line"><span class="built_in">cp</span> ~/Desktop/firmware/License.rtf ~/.cache/yay/upd72020x-fw</span><br></pre></td></tr></table></figure>

<p>继续我们的安装，接下来是开机引导程序</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot/ --bootloader-id=GRUB --removable</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<p>开启开机服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> gdm</span><br><span class="line">systemctl enabel NetworkManager</span><br></pre></td></tr></table></figure>

<p>安装完成，可以通过BIOS进入系统了</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>archlinux</tag>
      </tags>
  </entry>
  <entry>
    <title>archlinux的截图配置</title>
    <url>/2023/07/30/archlinux%E7%9A%84%E6%88%AA%E5%9B%BE%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>选择的是flameshot</p>
<p>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S flameshot-git</span><br></pre></td></tr></table></figure>

<p>截图方式：在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flameshot gui</span><br></pre></td></tr></table></figure>



<h3 id="快捷键配置"><a href="#快捷键配置" class="headerlink" title="快捷键配置"></a>快捷键配置</h3><p><img src="/image/image-20230730223313668.png" alt="image-20230730223313668"></p>
<p>如上图所示，选择一个自己喜欢的快捷键即可</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>archliux</tag>
      </tags>
  </entry>
  <entry>
    <title>conda_set</title>
    <url>/2024/04/19/conda-set/</url>
    <content><![CDATA[<h2 id="conda修改环境路径"><a href="#conda修改环境路径" class="headerlink" title="conda修改环境路径"></a>conda修改环境路径</h2><p>conda 默认的环境路径在<code>C:\Users\用户名\conda</code>中，C盘位置不够，因此希望修改到其余地方</p>
<p>在anaconda的终端输入</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240419225720792.png" alt="image-20240419225720792"></p>
<p>之后新建的环境就会出现再目标路径下了</p>
<h2 id="conda修改jupyter-notebook的默认文件夹"><a href="#conda修改jupyter-notebook的默认文件夹" class="headerlink" title="conda修改jupyter notebook的默认文件夹"></a>conda修改jupyter notebook的默认文件夹</h2><p>在anaconda的终端找到jupyter的配置文件</p>
<p><img src="/./../image/image-20240420000758149.png" alt="image-20240420000758149"></p>
<p>打开文件，找到这几行</p>
<p><img src="/./../image/image-20240420000917995.png" alt="image-20240420000917995"></p>
<p>取消<code>c.NotebookApp.notebook_dir</code>这一行的注释，在单引号中写入目标路径</p>
<p><img src="/./../image/image-20240420001053387.png" alt="image-20240420001053387"></p>
<p>打开jupyter notebook的应用路径</p>
<p><img src="/./../image/image-20240420001221183.png" alt="image-20240420001221183"></p>
<p>将选中区域删除</p>
<p>配置完成</p>
<ul>
<li>如果环境中没有jupyter，那么在终端输入<code>conda install nb_conda</code>即可</li>
<li>pytorch下载命令<code>pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118</code></li>
</ul>
<h2 id="jupyter设置"><a href="#jupyter设置" class="headerlink" title="jupyter设置"></a>jupyter设置</h2><p>新建的环境中没有jupyter，想要使用的话我们需要下载配置</p>
<p>首先下载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure>

<p>下载后的界面如图</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240602163539892.png" alt="image-20240602163539892"></p>
<p>比较简陋，我们也无法进行代码自动补全</p>
<p>因此我们进行一些配置，在anaconda中输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install jupyter_contrib_nbextensions</span><br><span class="line">jupyter contrib nbextensions install --user</span><br><span class="line">pip install jupyter_nbextensions_configurator</span><br><span class="line">jupyter nbextensions_configurator enable --user</span><br></pre></td></tr></table></figure>

<p>安装后界面如下<img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240602164243456.png" alt="image-20240602164243456"></p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240602164408582.png" alt="image-20240602164408582"></p>
<p>选中<code>hinterland</code>，设置完成</p>
]]></content>
      <categories>
        <category>experient</category>
      </categories>
      <tags>
        <tag>dl</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-git报错</title>
    <url>/2024/04/20/hexo-git%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h2 id="无法连接"><a href="#无法连接" class="headerlink" title="无法连接"></a>无法连接</h2><p>半年没用hexo，今天连接时发现需要输入用户名和密码，输入后报错，无法连接</p>
<p>遂重新配置一遍</p>
<ol>
<li><p>首先配置一下git的用户名和邮箱</p>
<p><img src="/./../image/image-20240420173725105.png" alt="image-20240420173725105"></p>
</li>
<li><p>创建ssh密钥</p>
<p><img src="/./../image/image-20240420173931385.png" alt="image-20240420173931385"></p>
<p>在显示的路径下找到文件</p>
<p><img src="/./../image/image-20240420174042116.png" alt="image-20240420174042116"></p>
<p>复制里面的内容</p>
</li>
<li><p>上传密钥</p>
<p><img src="/./../image/image-20240420174519454.png" alt="image-20240420174519454"></p>
<ol start="4">
<li><p>验证连接</p>
<p><img src="/./../image/image-20240420174753903.png" alt="image-20240420174753903"></p>
<p>出现图中”Hi“后面的内容即连接成功</p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>dairy</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo美化记录</title>
    <url>/2023/07/29/hexo%E7%BE%8E%E5%8C%96%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<hr>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>在网站(hexo)[<a href="https://hexo.io/themes/">Themes | Hexo</a>]中可以查看别人的主题，下载并进行自己的美化</p>
<p>下载后文件会放在&#x2F;themes目录下</p>
<p>更改blog文件夹下的_config.yml，修改主题</p>
<p><img src="/image/config.png" alt="image-20230729122511291"></p>
<p>有能力的也可以修改模板文件进行自定义主题</p>
<h2 id="文章分类"><a href="#文章分类" class="headerlink" title="文章分类"></a>文章分类</h2><p>生成的新文章头部会有一个说明</p>
<p>例如这篇博客的头部</p>
<p><img src="/image/%E5%A4%B4%E9%83%A8%E4%BF%A1%E6%81%AF.jpg" alt="图片"></p>
<p>在这一块加上</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">categories: hexo</span><br></pre></td></tr></table></figure>



<h2 id="本地图片插入文章网页不显示"><a href="#本地图片插入文章网页不显示" class="headerlink" title="本地图片插入文章网页不显示"></a>本地图片插入文章网页不显示</h2><p>关于这个问题，搜索后发现有几种方法：</p>
<ul>
<li>修改配置文件</li>
<li>安装插件</li>
<li>手动插入</li>
</ul>
<p>我尝试了一下，修改配置文件是指<code>_config.yml</code></p>
<p><img src="/image/assert%E4%BF%AE%E6%94%B9.jpg" alt="配置"></p>
<p>将这一行改成false，再将图片存放在与博客同名的文件夹中</p>
<p><strong>这个方法没用</strong></p>
<hr>
<p>于是我又尝试了手动插入</p>
<p>在<code>source</code>文件夹下新建一个文件夹为<code>image</code>，再将图片存放在里面，博客里使用相对路径，如<code>/image/assert.jpg</code>这样就可以成功显示了</p>
<p><strong>这个方法对我有用，于是没有尝试插件</strong></p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>网址：[插件](<a href="https://hexo.io/plugins/">Plugins | Hexo</a>)</p>
<p>待补充</p>
<h2 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h2><p>几个可以找背景的网址：</p>
<ul>
<li><a href="https://wallhaven.cc/">Awesome Wallpapers - wallhaven.cc</a></li>
<li><a href="https://bz.zzzmh.cn/index">极简壁纸_海量电脑桌面壁纸美图_4K超高清_最潮壁纸网站 (zzzmh.cn)</a></li>
<li><a href="https://wall.alphacoders.com/">Wallpaper Abyss - HD Wallpapers, Background Images (alphacoders.com)</a> 这个网站有点慢，但是图很多</li>
</ul>
<p>背景图片地址：</p>
<p>E:\projects\blog\blog\themes\diaspora\source\img</p>
<p>其中的<code>disapora</code>是主题名字，对应自己的主题名寻找，然后存进去</p>
<p>然后编辑主题的配置文件（主题文件夹下的_config.yml）</p>
<p><img src="/image/%E5%B0%81%E9%9D%A2%E5%9B%BE%E4%BF%AE%E6%94%B9.jpg" alt="封面图修改"></p>
<p>修改这几个参数就好，此处图片地址也为相对路径</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>daily</tag>
      </tags>
  </entry>
  <entry>
    <title>openslide安装</title>
    <url>/2024/05/16/openslide%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="openslide-下载"><a href="#openslide-下载" class="headerlink" title="openslide 下载"></a>openslide 下载</h2><p>在(<a href="https://openslide.org/download/">Downloading OpenSlide</a>)下载对应操作系统的二进制包，解压</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240516200241133.png" alt="image-20240516200241133"></p>
<p>为这个文件夹中的<strong>bin</strong>和<strong>lib</strong>添加环境变量</p>
<p>激活环境，在命令行中运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install Openslide-python</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240516201746994.png"></p>
<p>出现这行字表示成功安装</p>
<h2 id="openslide-导入"><a href="#openslide-导入" class="headerlink" title="openslide 导入"></a>openslide 导入</h2><p>在环境中输入python</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240516201923931.png" alt="image-20240516201923931"></p>
<p>这个时候直接导入会报错</p>
<p>我们可以进行如下操作：</p>
<p>先加载os</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.add_dll_directory(<span class="string">&quot;D:\\Users\\xuhui\\anaconda3\\Library\\openslide-win64-20231011\\bin&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>再进行加载</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240516202221041.png" alt="image-20240516202221041"></p>
<p>成功导入</p>
]]></content>
      <categories>
        <category>experient</category>
      </categories>
      <tags>
        <tag>dl</tag>
      </tags>
  </entry>
  <entry>
    <title>picgo+github</title>
    <url>/2023/07/30/picgo-github/</url>
    <content><![CDATA[<h2 id="picgo下载"><a href="#picgo下载" class="headerlink" title="picgo下载"></a>picgo下载</h2><p>[链接](<a href="http://molunerfinn.com/PicGo/">PicGo (molunerfinn.com)</a>)</p>
<p>下载安装后打开，进入 <code>图床设置</code>-&gt;<code>github</code></p>
<p><img src="/image/image-20230730225439663.png" alt="image-20230730225439663"></p>
<p>填入相应的信息</p>
<p>token要在GitHub生成</p>
<h2 id="生成token"><a href="#生成token" class="headerlink" title="生成token"></a>生成token</h2><p>在GitHub新建一个仓库，取一个自己喜欢的名，（*这里取的是<code>image</code>*）</p>
<p>然后在设置里，拉到最下面，选择开发者选项</p>
<p><img src="/image/image-20230730225729836.png" alt="image-20230730225729836"></p>
<p>填入即可</p>
<h2 id="typora设置"><a href="#typora设置" class="headerlink" title="typora设置"></a>typora设置</h2><p>由于app上传失败（不知道为什么，于是选择了插件模式）</p>
<p><img src="/./../image/image-20230730231733097.png" alt="image-20230730231733097"></p>
<p>选择这个模式并下载，接着在C盘中&#x2F;APPData&#x2F;Roaming文件夹下找到Typora文件夹，里面的&#x2F;picgo&#x2F;win64子文件夹，其中有一个.exe文件，不用管他，在路径中输入cmd打开终端，并按照下图输入</p>
<p>其中customUrl最后两个为你的用户名和仓库名，按照自身情况替换</p>
<p><img src="/./../image/image-20230730231709888.png" alt="image-20230730231709888"></p>
<p>接着输入<code>picgo use uploader</code>，回车后选择GitHub，成功后回到typora选择验证，在GitHub中看到图片即成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20230730232515873.png" alt="image-20230730232515873"></p>
<p>这样就成功了</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>tensorflow下载过程</title>
    <url>/2024/06/14/tensorflow%E4%B8%8B%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我在一年前曾写过一个<code>tensorflow</code>的安装流程笔记，但是今天再次安装发现存在一些问题，因此重新撰写</p>
<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>之前的笔记中我没有意识到python，tensorflow，cuda，cudnn的对应关系，这次在服务器上安装就掉坑里了，因此在安装前首先要注意需要下载的版本，以及自己的cuda和cudnn版本</p>
<p>我使用的是<code>python = 3.9</code>，<code>tensorflow==2.10.0</code>，<code>cuda==11.3.1</code>，<code>cudnn==8.2.1</code></p>
<p>具体步骤为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n env_name python=3.9</span><br><span class="line">conda activate env_name</span><br><span class="line">conda install cudatoolkit==11.3.1</span><br><span class="line">conda install cudnn==8.2.1</span><br><span class="line">pip install tensorflow==2.10.0 -i source</span><br></pre></td></tr></table></figure>

<p>这样就初步安装成功了</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>在之前的验证中我只验证了<code>tensorflow</code>是否安装成功，而没有检测能否使用<code>GPU</code>，因此将验证命令更新如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tf.__version__)</span><br><span class="line"><span class="built_in">print</span>(tf.test.is_gpu_available())</span><br><span class="line"><span class="built_in">print</span>(tf.test.gpu_device_name())</span><br><span class="line"><span class="built_in">print</span>(tf.config.list_physical_devices(<span class="string">&#x27;GPU&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Num GPUs Available: &quot;</span>,<span class="built_in">len</span>(tf.config.experimental.list_physical_devices(<span class="string">&#x27;GPU&#x27;</span>)))</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240614094327445.png" alt="image-20240614094327445"></p>
<p>运行结果中出现这个<code>True</code>表示识别成功</p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>dl</tag>
      </tags>
  </entry>
  <entry>
    <title>torch_geometric安装</title>
    <url>/2024/05/12/torch-geometric%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="torch-geometric安装过程"><a href="#torch-geometric安装过程" class="headerlink" title="torch_geometric安装过程"></a>torch_geometric安装过程</h2><h4 id="环境-版本检查"><a href="#环境-版本检查" class="headerlink" title="环境+版本检查"></a>环境+版本检查</h4><p>首先打开anaconda虚拟环境</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240512113546223.png" alt="image-20240512113546223"></p>
<p>我这里已经有一个下载好的pytorch环境，激活并查看相关信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240512113846076.png" alt="image-20240512113846076"></p>
<h4 id="下载必要的依赖"><a href="#下载必要的依赖" class="headerlink" title="下载必要的依赖"></a>下载必要的依赖</h4><p>找到[GitHub](<a href="https://github.com/pyg-team/pytorch_geometric">pyg-team&#x2F;pytorch_geometric: Graph Neural Network Library for PyTorch (github.com)</a>)的地址，点击Additional Libraries中的<a href="https://data.pyg.org/whl">here</a></p>
<p><img src="/./../image/image-20240512124006928-1715488907105-1-1715488924173-4.png" alt="image-20240512124006928"></p>
<p>找到对应的pytorch和cuda版本，点击进去</p>
<p>其中一共有四种依赖，下载下来，如图所示</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240512124526032.png" alt="image-20240512124526032"></p>
<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>打开虚拟环境，进入上述四个文件的目录下</p>
<p>然后依次安装</p>
<ol>
<li>torch_scatter</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install torch_scatter-2.0.9-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>torch_sparse</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install torch_sparse-0.6.12-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>torch_cluster</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install torch_cluster-1.5.9-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>torch_spline_conv</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install torch_cluster-1.5.9-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>安装torch_geometric，可以指定版本</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install torch_geometric -i https://mirrors.aliyun.com/pypi/simple</span><br></pre></td></tr></table></figure>

<p>最后验证一下</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240512125706881.png" alt="image-20240512125706881"></p>
]]></content>
      <categories>
        <category>experient</category>
      </categories>
      <tags>
        <tag>-dl</tag>
      </tags>
  </entry>
  <entry>
    <title>免费科学上网方法记录</title>
    <url>/2023/08/10/%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>今天在油管上看到一个科学上网方法，记录一下</p>
<p>首先是[下载链接](<a href="https://1.1.1.1/">1.1.1.1 — The free app that makes your Internet faster.</a>)，这是一个名为warp的软件，下载后可以免费获得1G的科学流量</p>
<p>但是这显然不够用</p>
<p>免费获取永久资格的方法有两种：</p>
<ul>
<li>使用信用卡或者paypal注册一个CloudFlare的账号，选择团队套餐，$0的那个，就可以获得免费的流量</li>
<li>关注warp的telegram</li>
</ul>
<p>我选择的是第二种</p>
<p>先使用免费的1G流量注册一个telegram账号（国内手机号可以使用），然后搜索<code>warp+bot</code></p>
<p><img src="/./../image/image-20230810221713595.png" alt="image-20230810221713595"></p>
<p>如图所示，选择这个账号，进入后点击”&#x2F;generate“，他会提醒你关注两个账号，关注后点击第三个”我已关注“，它会返给你几个计算题，算好后就会生成密钥，最后回到warp软件偏好设置中更换密钥，就可以获得花不完的流量啦</p>
<p>原视频链接：<a href="https://www.youtube.com/watch?v=mkv6MRzvjPE">(10) 免费VPN的杀手！Warp+ 速度贼快，不限制流量，由大名鼎鼎的CloudFlare 提供，放心白嫖 | 零度解说 - YouTube</a></p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>daily</tag>
        <tag>magic</tag>
      </tags>
  </entry>
  <entry>
    <title>我的hexo配置过程</title>
    <url>/2023/07/29/%E6%88%91%E7%9A%84hexo%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>前两天配置了一个archlinux，过程中遇到很多问题，想记录一下，忽然想起两年前做过的个人博客实验，于是打算重新捡起来</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>当初的实验并没有成功，于是我重新尝试了一下</p>
<p>遇到的问题：<code>git bash</code>中无法执行<code>hexo</code>,即使修改了环境变量也没用</p>
<p><img src="/image/hexo%E9%94%99%E8%AF%AF.jpg" alt="image-20230729095144582"></p>
<p>在网上找到的解决方案：</p>
<p>建立一个空的blog文件夹，再执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">npx hexo server</span><br></pre></td></tr></table></figure>

<p>注：命令在blog文件夹打开终端执行</p>
<p>执行后打开 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以看到博客界面了</p>
<p>停止服务：在终端按下<code>CTRL</code>+<code>C</code></p>
<p>新建博客：在终端输入<code>npx hexo n &quot;博客名字&quot;</code></p>
<p>上传博客：</p>
<ul>
<li><code>npx hexo clean</code></li>
<li><code>npx hexo g</code></li>
<li><code>npx hexo s</code></li>
</ul>
<p>再打开网页，就可以看到上传的博客了</p>
<p>上传到<code>github</code>：</p>
<ul>
<li><code>npx hexo d</code></li>
</ul>
<p>有时候可能会出现错误：<code>error: RPC failed; curl 35 OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</code></p>
<p>这个时候可以先执行<code>git config --global http.postBuffer 5242880000</code>，再推送到GitHub</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>daily</tag>
        <tag>experient</tag>
      </tags>
  </entry>
  <entry>
    <title>错误1006解决方案</title>
    <url>/2023/08/01/%E9%94%99%E8%AF%AF1006%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="记录一下"><a href="#记录一下" class="headerlink" title="记录一下"></a>记录一下</h2><p>今天离开电脑的时候没有关闭watt toolkit软件（并且它还开着GitHub加速），等我回来时电脑自动关机了</p>
<p>当时意识到大事不妙（以前也遇到过），果然，已经无法上网了，并且watt提示错误代码1006，主机拒绝访问</p>
<p>于是记录一下解决过程</p>
<hr>
<p>首先搜索了一下“电脑连上网络但是无法上网怎么办”</p>
<p>一个解决方案说可以修改wlan的设置，双击IPv4</p>
<img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20230801221357568.png" alt="image-20230801221357568" style="zoom:67%;" />

<p>修改DNS设置（由于并没有用所以我就不贴上来了）</p>
<hr>
<p>然后在edge里运行网络检测，提示“远程计算机或设备不接受连接”，搜索这个关键词</p>
<p>修复方法：打开控制面板（<code>win</code>+<code>R</code>再输入<code>control</code>）–&gt; 连接 –&gt; 局域网设置 –&gt; 只勾选“自动检测设置”</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20230801222017921.png" alt="image-20230801222017921"></p>
<p>这样就解决问题了</p>
]]></content>
      <categories>
        <category>daily</category>
        <category>error</category>
      </categories>
      <tags>
        <tag>daily</tag>
      </tags>
  </entry>
  <entry>
    <title>linux to go 移动硬盘制作</title>
    <url>/2024/06/17/linux-to-go-%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>去年曾经购置过一个移动硬盘，希望改装成<code>ArchLinux</code>的启动盘，因为种种原因未能成功，移动硬盘就变成了一个数据盘，今年由于经常使用服务器跑代码，希望重新捡起来Linux系统的操作（wsl也下载了，但是感觉不如Ubuntu-desktop方便），因此又萌生了Linux启动盘的想法，特此记录过程</p>
<p>操作过程教程来源于<a href="https://blog.csdn.net/m0_64545111/article/details/136131918">【万字详细教程】Linux to go——装在移动硬盘里的Linux系统（Ubuntu22.04）制作流程；一口气解决系统安装&#x2F;引导文件迁移&#x2F;显卡驱动安装等问题-CSDN博客</a></p>
<p>那么就开始吧</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p>首先是准备好移动硬盘，Linux系统镜像（ubuntu下载地址<a href="https://ubuntu.com/download/desktop">Download Ubuntu Desktop | Ubuntu</a>），分盘工具（<a href="https://www.diskgenius.cn/download.php">DiskGenius – 正式版下载|免费下载</a>）</p>
<h3 id="分盘"><a href="#分盘" class="headerlink" title="分盘"></a>分盘</h3><p>由于我的硬盘中已经有数据了，所以我先备份数据，再删除分区</p>
<p>右击磁盘然后删除当前分区</p>
<p>然后转化分区为<code>GUID</code>格式</p>
<blockquote>
<p>怎么看自己的硬盘是不是GUID格式？可以单击硬盘后点击上方的磁盘选项，其中转化为GUID格式是灰色的则表示这个硬盘已经是GUID格式了</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240617221149413.png" alt="image-20240617221149413"></p>
<p>然后建立<code>esp</code>分区</p>
<p>接下来同样的建立其他分区，注意格式和大小，最后的分区情况如图所示</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240617223815292.png" alt="image-20240617223815292"></p>
<p>然后将备份的数据还原到F盘中</p>
<h3 id="准备启动U盘"><a href="#准备启动U盘" class="headerlink" title="准备启动U盘"></a>准备启动U盘</h3><p>下载软件<code>UltraISO</code>，地址<a href="https://ultraiso.net/xiazai.html">最新UltraISO官方免费下载 - UltraISO软碟通中文官方网站</a></p>
<p>将一个空白的U盘插入电脑</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240617225021101.png" alt="image-20240617225021101"></p>
<p>在这里打开下载的镜像文件，然后点击启动-&gt;写入硬盘映像</p>
<p>依次点击 <code>便捷启动 -&gt; 写入新的驱动器引导扇区 -&gt; Syslinux -&gt; 写入</code></p>
<p>读条结束后即可</p>
<h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>这一步由于在BIOS中进行，没有截图显示，仅记录一些要点以及我遇到的问题</p>
<ul>
<li>我的电脑为2019款联想拯救者y7000，在重启&#x2F;开机时按F2并不能进入BIOS界面<ul>
<li>我们可以在Windows中依次点击 设置 -&gt; windows更新 -&gt; 高级选项 -&gt; 恢复 -&gt; 高级启动 -&gt; 立即重启，从而进入BIOS界面</li>
</ul>
</li>
<li>U盘插入但是设备中没有<code>linpus lite</code>，这可能是因为U盘的问题，我换了个U盘就成功了</li>
<li>安装过程中记得联网，以及一定要检查设置盘时除去之前安排给Linux的四个区域，其余区域都处于<strong>不使用此分区</strong></li>
<li>安装后会重启，记得拔下U盘后按enter</li>
<li>这里教程中说应该选择<code>enrool mdk</code>，但是我在这一步的时候无法选择，只能强制关机，再重启后已经没有这个选项了，只有<code>reset mdk</code>，我拿不准这二者是不是一样的，于是选择了<code>continue boot</code>，也启动成功了，不确定这里后续会不会有问题</li>
<li>重启时可能会进入<code>grub</code>界面，如果想回到Windows系统可以这样操作</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls</span><br><span class="line">ls (hd0,1)/efi/microsoft/boot/bootmgfw.efi</span><br><span class="line">root=(hd1,1)</span><br><span class="line">boot</span><br></pre></td></tr></table></figure>

<p>这里第二行要遍历所有分区找到这个文件再进行下一步</p>
<p>到这里差不多安装完成，后续是一些设置</p>
<h3 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h3><p>将系统启动引导转移到移动硬盘上以避免每次都要选择系统</p>
<p>将硬盘和U盘都插上电脑，开机进入BIOS选择<code>试用unbuntu</code>，连接网络，然后在终端输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-add-repository ppa:yannubuntu/boot-repair</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install boot-repair</span><br><span class="line">boot-repair</span><br></pre></td></tr></table></figure>

<p>选择“推荐修复”，等待程序运行完成即可</p>
<p>返回Windows系统，可以看到</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240618011033111.png" alt="image-20240618011033111"></p>
<p><code>esp</code>分区中出现了<code>efi</code>，那么我们就可以删除主硬盘中的ubuntu了</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240618011231247.png" alt="image-20240618011231247"></p>
<p>至此便初步大功告成了，之后可以根据需要对Ubuntu安装软件和美化</p>
<p>后续：在拔下硬盘启动电脑时发生一直在logo界面闪退的现象，进入BIOS发现启动引导中仍然存在<code>linpus lite</code>，尽管我没有插U盘</p>
<p>解决：使用<code>bootice</code>软件将efi选项中多余的删除，即可正常开机了。</p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>daily</tag>
      </tags>
  </entry>
  <entry>
    <title>arch-install的使用</title>
    <url>/2024/07/04/arch-install%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="arch-install的使用"><a href="#arch-install的使用" class="headerlink" title="arch-install的使用"></a>arch-install的使用</h2><p>由于arch的安装较为繁琐，因此出现了一种arch-install的工具，今天在虚拟机上试一试</p>
<p>首先创建一个虚拟机并且连接网络，更换镜像源：编辑文件<code>/etc/pacman.d/mirrorlist</code></p>
<p>在最上面加上<code>Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</code>  </p>
<p>输入<code>archinstall</code>进入安装程序</p>
<p><img src="https://cdn.jsdelivr.net/gh/xyuechen/image/image-20240704094012719.png" alt="image-20240704094012719"></p>
<p>其中，语言中有简体中文，但是直接设置会导致乱码，我们还需要下载字体，因此我们直接使用英文安装</p>
<p>mirror中我们选择第一个，找到China，空格选中，回车确认</p>
<p>locale默认即可，不用修改</p>
<p>disk configuration 我们可以直接选择第一个自动分区，进入后再选择ext4分区</p>
<p>bootloader可以选默认或grub，由于我希望使用这个虚拟机作用移动系统的试验机，因此我选择grub</p>
<p>hostname设置机器名称</p>
<p>rootpasswd设置管理员密码</p>
<p>usercount设置用户，我们可以在这里新添用户并且赋予管理员权限</p>
<p>profile可以选择想要的桌面环境，由于硬盘中我选择的是gnome，因此这里也选择gnome，这里还可以选择显卡驱动，我试试nvidia显卡驱动能不能正常安装</p>
<p>optional repositories中选择第一个</p>
<p>然后下载安装，等待片刻</p>
<p>重启后即可进入系统（nvidia还是安装失败了，重新设置了一遍才启动）</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>archlinux</tag>
      </tags>
  </entry>
  <entry>
    <title>arch之hyprland</title>
    <url>/2024/07/04/arch%E4%B9%8Bhyprland/</url>
    <content><![CDATA[<hr>
<p>之前试图在硬盘arch中安装nvidia驱动再安装hyprland，导致系统直接挂了，现在来试试在虚拟机中直接安装试试</p>
<p>官网<a href="https://hyprland.org/">Hyprland</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -S hyprland</span><br><span class="line">yay -S hyprland-git</span><br></pre></td></tr></table></figure>

<p>上面两种方法任选一个</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.config/hyprland</span><br><span class="line">cp /usr/share/hyprland/hyprland.conf ~/.config/hyprland</span><br><span class="line">vim ~/.config/hyprland/hyprland.conf</span><br></pre></td></tr></table></figure>

<p>编辑配置文件</p>
<p>找到$mainMod这一行，后面都是快捷键配置，其中<code>$</code>的字符表示应该被替换的</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>archlinux</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2024/09/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>定义状态：确定问题的状态表示</li>
<li>状态转移方程(核心步骤)：建立状态之间的递推关系。通常，当前状态最优解可通过之前计算的状态最优解得到</li>
<li>初始化：确定初始状态的值或设置起始条件</li>
<li>计算最优解：根据状态转移方程，逐步计算所有可能的状态的值</li>
</ol>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>假设有一个二维的网络，每个单元格中有一个非负整数，目标为从左上角到右下角，每次只能向右或向下移动，要求路径上的数字之和最小</p>
<ul>
<li><p>定义状态：定义<code>dp[i][j]</code>为到达第<code>i</code>行第<code>j</code>列的最小路径和</p>
</li>
<li><p>状态转移方程：由于只能向右或向下移动，因此，状态转移方程为 $dp[i][j] &#x3D; min(dp[i-1][j],dp[i],[j-1]) + grid[i][j]$</p>
<p>这里<code>grid[i][j]</code>是网格中第<code>i</code>行第<code>j</code>列的值</p>
</li>
<li><p>初始化条件：初始化左上角的值<code>dp[0][0] = grid[0][0]</code>；第一行只能从左边来，所以<code>dp[0][j] = dp[0][j-1] + grid[0][j]</code>；第一列只能从上面来，所以<code>dp[i][0] = dp[i-1][0] + grid[i][0]</code></p>
</li>
<li><p>填充DP表：按行或按列迭代填充整个DP表，最终<code>dp[m-1][n-1]</code>将包含从左上角到右下角的最小路径和</p>
</li>
</ul>
<h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><p>这里使用python代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">minPathSum</span>(<span class="params">grid</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> grid <span class="keyword">or</span> <span class="keyword">not</span> grid[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    m, n = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">    dp = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化起点</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化第一行和第一列</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">        dp[i][<span class="number">0</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j-<span class="number">1</span>] + grid[<span class="number">0</span>][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充剩余的dp表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            dp[i][j] = <span class="built_in">min</span>(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]) + grid[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>experience</category>
      </categories>
  </entry>
  <entry>
    <title>如何打开并贡献文档仓库</title>
    <url>/2024/11/14/%E5%A6%82%E4%BD%95%E6%89%93%E5%BC%80%E5%B9%B6%E8%B4%A1%E7%8C%AE%E6%96%87%E6%A1%A3%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>git作为常用的版本管理工具，我们应该学会如何使用git与文档仓库连接</p>
<blockquote>
<p>本文以GitHub为例</p>
</blockquote>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>我们使用git连接github</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>

<p>这里的email填入注册GitHub用的邮箱</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>然后将<code>~/.ssh/id_rsa.pub</code>的内容复制到GitHub中，通过下面的命令验证是否连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>如果显示“welcome……”就表示连接成功</p>
<h2 id="打开远程仓库"><a href="#打开远程仓库" class="headerlink" title="打开远程仓库"></a>打开远程仓库</h2><p>我们可以直接clone到本地进行编辑</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Document/</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:respo/respo.git</span><br></pre></td></tr></table></figure>

<p>上面的地址根据具体情况填入</p>
<h2 id="贡献开源代码"><a href="#贡献开源代码" class="headerlink" title="贡献开源代码"></a>贡献开源代码</h2><p>对于自己创建的仓库，可以在本地的项目文件夹运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m<span class="string">&quot;the first commit&quot;</span></span><br><span class="line">git remote add origin git@github.com:xyuechen/practice.git //关联远程仓库</span><br><span class="line">git push -u origin master -f</span><br></pre></td></tr></table></figure>

<p>但是对于别人的项目，我们可以先将项目fork一份副本，再拉取请求</p>
<p>我目前修改了一份文档，并希望将它推送到GitHub这时候可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/SongshGeo/Shuang-Team.git</span><br><span class="line">git checkout feat.xutest</span><br><span class="line">git add .</span><br><span class="line">git commit -m<span class="string">&quot;modified keywords&quot;</span></span><br><span class="line">git push origin feat.xutest:feat.xutest</span><br></pre></td></tr></table></figure>

<p>没报错就表示推送成功了，可以在GitHub查看一下</p>
<h2 id="保持更新"><a href="#保持更新" class="headerlink" title="保持更新"></a>保持更新</h2><p>如果拉取的远程代码改变了，我们希望本地代码同步变化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add upstream https://github.com/SongshGeo/Shuang-Team.git</span><br><span class="line">git remote -v</span><br><span class="line">git fetch upstream</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>daily</tag>
      </tags>
  </entry>
</search>
